# Trigger the build whenever `main` or `rel/*` is updated
trigger:
  - main
  - rel/*

pr: none # Disable PR trigger

# Scheduled nightly build
schedules:
  - cron: "0 0 * * *"
    displayName: Nightly scheduled build
    always: false # Don't rebuild if there haven't been changes
    branches:
      include:
        - main

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    # Update the pool with your team's 1ES hosted pool.
    pool:
      name: VSEngSS-MicroBuild2022-1ES # Name of your hosted pool
      #image: windows-latest # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows # OS of the image. Allowed values: windows, linux, macOS
      vmImage: windows-latest

    stages:
      - stage: Stage
        jobs:
          - job: HostJob
            # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
            # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(build.artifactstagingdirectory)/build
                  artifactName: artifactName
            # Define the steps that the pipeline will run.
            # In most cases, copy and paste the steps from the original pipeline.
            steps:
              - task: NodeTool@0
                displayName: Using Node.js
                inputs:
                  versionSource: fromFile
                  versionFilePath: .nvmrc

              - task: Npm@1
                displayName: Install Dependencies
                inputs:
                  command: custom
                  customCommand: ci --no-optional

              - bash: |
                  /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
                  echo ">>> Started xvfb"
                displayName: Start X Virtual Frame Buffer
                condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

              - task: Npm@1
                displayName: "Build"
                inputs:
                  command: custom
                  customCommand: run build

              - task: Npm@1
                displayName: "Package"
                inputs:
                  command: custom
                  customCommand: run package

              - task: CopyFiles@2
                displayName: "Copy packages and vsix to staging directory"
                inputs:
                  Contents: |
                    **/*.vsix
                    **/*.tar.gz
                    **/*.tgz
                  TargetFolder: "$(build.artifactstagingdirectory)/build"
                condition: and(eq(variables['Agent.OS'], 'Linux'), ne(variables['System.PullRequest.IsFork'], 'True'))

              # - task: 1ES.PublishPipelineArtifact@1
              #   displayName: "Publish artifacts: packages and vsix"
              #   inputs:
              #     PathtoPublish: "$(build.artifactstagingdirectory)/build"
              #     ArtifactName: $(artifact_name)
              #   condition: and(eq(variables['Agent.OS'], 'Linux'), ne(variables['System.PullRequest.IsFork'], 'True'))
